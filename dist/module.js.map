{"mappings":"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","sources":["src/main.ts","src/states/ClockState.ts","node_modules/@parcel/runtime-js/lib/runtime-c939edc17b96e448.js","src/shaders/clock-face.glsl"],"sourcesContent":["import { Engine } from \"rattler\";\nimport ClockState from \"./states/ClockState\";\n\nexport default class ShaderClock extends Engine {\n  init() {\n    this.loadState(ClockState);\n  }\n}\n","import { State } from \"rattler\";\nimport * as THREE from \"three\";\nimport backgroundImage from \"url:../assets/background.png\";\nimport clockFaceFragmentShader from \"../shaders/clock-face.glsl\";\n\nexport default class ClockState extends State {\n  scene: THREE.Scene = new THREE.Scene();\n  camera!: THREE.PerspectiveCamera;\n  renderer!: THREE.WebGLRenderer;\n  uniforms!: { [key: string]: THREE.IUniform };\n  clock: THREE.Clock = new THREE.Clock();\n  clockFace!: THREE.Mesh;\n  hourHand!: THREE.Mesh;\n  minuteHand!: THREE.Mesh;\n  secondHand!: THREE.Mesh;\n\n  onInit() {\n    this.scene.background = new THREE.TextureLoader().load(backgroundImage);\n    this.camera = new THREE.PerspectiveCamera(\n      75, // Field of view\n      this.canvas.width / this.canvas.height, // Aspect ratio\n      0.1, // Near clipping plane\n      1000, // Far clipping plane\n    );\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.engine.canvas,\n      antialias: true,\n    });\n    this.uniforms = {\n      uTime: new THREE.Uniform({\n        type: \"f\",\n        value: 0,\n      }),\n      uResolution: new THREE.Uniform({\n        value: new THREE.Vector2(\n          this.renderer.domElement.width,\n          this.renderer.domElement.height,\n        ),\n      }),\n    };\n\n    // Draw clock border\n    const geometry = new THREE.CircleGeometry(3, 64);\n    const material = new THREE.ShaderMaterial({\n      fragmentShader: clockFaceFragmentShader,\n      uniforms: this.uniforms,\n    });\n    const circle = new THREE.Mesh(geometry, material);\n    circle.position.set(0, 0, 0);\n    this.scene.add(circle);\n    this.clockFace = circle;\n\n    // Draw clock hands\n    const hourGeometry = new THREE.BoxGeometry(0.1, 1.5, 0.1);\n    hourGeometry.translate(0, 0.75, 0);\n    const hourMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\n    const hourHand = new THREE.Mesh(hourGeometry, hourMaterial);\n    hourHand.position.set(0, 0, 0);\n    hourHand.rotation.z = 0;\n    this.scene.add(hourHand);\n    this.hourHand = hourHand;\n\n    const minuteGeometry = new THREE.BoxGeometry(0.05, 2, 0.05);\n    minuteGeometry.translate(0, 1, 0);\n    const minuteMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\n    const minuteHand = new THREE.Mesh(minuteGeometry, minuteMaterial);\n    minuteHand.position.set(0, 0, 0);\n    minuteHand.rotation.z = 0;\n    this.scene.add(minuteHand);\n    this.minuteHand = minuteHand;\n\n    const secondGeometry = new THREE.BoxGeometry(0.02, 2.5, 0.02);\n    secondGeometry.translate(0, 1.25, 0);\n    const secondMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });\n    const secondHand = new THREE.Mesh(secondGeometry, secondMaterial);\n    secondHand.position.set(0, 0, 0);\n    secondHand.rotation.z = 0;\n    this.scene.add(secondHand);\n    this.secondHand = secondHand;\n\n    // Make background blue\n    this.renderer.setClearColor(0x002233); // Set the clear color to black\n    this.renderer.setSize(this.canvas.width, this.canvas.height); // Set the size of the renderer\n    this.renderer.setPixelRatio(window.devicePixelRatio); // Set pixel ratio for better quality on high DPI screens\n    this.camera.position.z = 5; // Set camera position\n    this.camera.position.y = 0; // Set camera y position\n    this.camera.position.x = 0; // Set camera x position\n    this.camera.lookAt(new THREE.Vector3(0, 0, 0)); // Make the camera look at the origin (0, 0, 0)\n  }\n\n  onUpdate(deltaTime: number) {\n    const date = new Date();\n\n    this.uniforms.uTime.value = this.clock.getElapsedTime();\n    this.uniforms.uResolution.value = new THREE.Vector2(\n      this.renderer.domElement.width,\n      this.renderer.domElement.height,\n    );\n\n    this.hourHand.rotation.z =\n      -((date.getHours() % 12) + date.getMinutes() / 60) * (Math.PI / 6);\n    this.minuteHand.rotation.z = -(\n      (date.getMinutes() + date.getSeconds() / 60) *\n      (Math.PI / 30)\n    );\n    this.secondHand.rotation.z =\n      -(date.getSeconds() + date.getMilliseconds() / 1000) * (Math.PI / 30);\n\n    this.camera.position.x = 0;\n    this.camera.position.y = 0;\n    this.camera.position.z = 5;\n    this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n  }\n\n  onRender(canvas: HTMLCanvasElement) {\n    this.renderer.setSize(this.canvas.width, this.canvas.height);\n    this.renderer.setPixelRatio(window.devicePixelRatio); // Set pixel ratio for better quality on high DPI screens\n    this.renderer.render(this.scene, this.camera);\n\n    // Copy the rendered image from the WebGL renderer to the main canvas\n    canvas.getContext(\"2d\")?.drawImage(this.canvas, 0, 0);\n  }\n}\n","module.exports = new __parcel__URL__(\"background.6b7eaf99.png\").toString();","// Uniforms (provided by your rendering code)\nuniform float uTime; // Time in seconds\nuniform vec2 uResolution; // Canvas resolution (width, height)\n\nvoid applyBaseColor(vec3 color) {\n  gl_FragColor = vec4(color, 1.0); // Set the fragment color\n}\n\nvoid drawBubbles() {\n  vec3 c;\n  float l;\n  float z = uTime * 0.2;\n  vec2 r = uResolution.xy;\n\n  for (int i = 0; i < 3; i++) {\n    vec2 p = gl_FragCoord.xy / r;\n    vec2 uv = p;\n    p -= 0.5;\n    p.x *= r.x / r.y;\n    z += 0.07;\n    l = length(p);\n    uv += p / l * (sin(z) + 1.0) * abs(sin(l * 9.0 - z - z));\n    c[i] = 0.01 / length(mod(uv, 1.0) - 0.5);\n  }\n\n  gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0) * vec4(c / l, uTime) + gl_FragColor;\n}\n\nvoid clampColor() {\n  gl_FragColor = clamp(gl_FragColor, vec4(0.0), vec4(1.0)); // Clamp color values to [0, 1]\n}\n\nvoid main() {\n  applyBaseColor(vec3(0.0, 0.6, 1.0)); // Set the base color\n  drawBubbles();\n  clampColor();\n}\n"],"names":[],"version":3,"file":"module.js.map"}